defaultTasks "clean", "release"

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"

sourceCompatibility = 1.7
targetCompatibility = 1.7

group = 'com.idzivinskyi'
artifactId = 'webapp'
version = '0.0.1'
description = 'Tool for mail end point'

repositories {
    mavenCentral();
}

task deleteLibs << {
    delete "dist"
}
clean.dependsOn("deleteLibs")

dependencies {

    compile('com.google.guava:guava:14.0.1')
    compile('com.google.inject:guice:3.0')
    compile('com.google.inject.extensions:guice-multibindings:3.0'){
        exclude(module: 'guice')
    }
    compile('com.google.inject.extensions:guice-servlet:3.0'){
        exclude(module: 'guice')
    }

    compile('org.mortbay.jetty:servlet-api:3.0.20100224')


    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.2'
    compile 'org.glassfish.hk2:guice-bridge:2.2.0-b15'

    compile 'org.eclipse.jetty:jetty-server:9.0.3.v20130506'
//    compile 'org.eclipse.jetty:jetty-webapp:9.0.3.v20130506'
    compile('org.mortbay.jetty:servlet-api:3.0.20100224')

    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    testCompile 'junit:junit:4+'
    testCompile 'org.mockito:mockito-all:1.8+'
}

task copyDeps(dependsOn: 'clean') << {
    copy {
        from configurations.compile
        into 'dist/lib'
    }
    copy {
        from 'log4j.xml'
        into 'dist'
    }
}

compileJava.dependsOn("copyDeps")
jar.dependsOn(test)
jar {
    manifest {
        def manifestClasspath = configurations.compile.collect { 'lib/' + it.getName() }.join(' ')
        def mainClass = "com.idzivinskyi.Main"
        attributes "Implementation-Title": "webapp",
                "Implementation-version": version,
                "Class-Path": manifestClasspath,
                "Main-Class": mainClass
    }
}

task pack(dependsOn: jar) << {
    copy {
        from configurations.compile
        into 'dist/lib'
    }
    copy {
        from jar.archivePath
        into "dist"
    }
}

task zipSrc(type: Zip, dependsOn: pack) {
    description = "Zip source files directory"
    from projectDir
    include "src/**/*"
    classifier = "src"
}

task zipJars(type: Zip, dependsOn: zipSrc) {
    description = "Zip binary jars"
    from("dist/")
}

task release(dependsOn: zipJars) << {
    copy {
        from zipSrc.archivePath
        into "dist"
    }
    copy {
        from zipJars.archivePath
        into "dist"
    }
}